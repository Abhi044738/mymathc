# Makefile â€” root of mathCompiler/
#-----------------------------------
# Compiler and tools
CC       := gcc
FLEX     := flex
BISON    := bison

# Directories
SRCDIR          := src
THIRD_PARTY_DIR := third_party/cJSON
BUILDDIR        := build

# Source files
SRC_C          := $(wildcard $(SRCDIR)/*.c)
LEX_FILE       := $(SRCDIR)/lexer.l
YACC_FILE      := $(SRCDIR)/parser.y
CJSON_C        := $(THIRD_PARTY_DIR)/cJSON.c

# Generated by Bison/Flex
YACC_C         := $(BUILDDIR)/parser.tab.c
YACC_H         := $(BUILDDIR)/parser.tab.h
LEX_C          := $(BUILDDIR)/lexer.yy.c

# Object files
OBJS           := $(patsubst $(SRCDIR)/%.c,$(BUILDDIR)/%.o,$(filter-out $(SRCDIR)/main.c,$(SRC_C))) \
                  $(BUILDDIR)/main.o \
                  $(BUILDDIR)/parser.tab.o \
                  $(BUILDDIR)/lexer.yy.o \
                  $(BUILDDIR)/cJSON.o

# Final executable
TARGET         := mymathc

# Flags
CFLAGS         := -std=c11 -Wall -I$(SRCDIR) -I$(THIRD_PARTY_DIR)
CFLAGS         := -std=c11 -Wall -I$(SRCDIR) -I$(THIRD_PARTY_DIR) -I$(BUILDDIR)
LDFLAGS        := -lm

.PHONY: all clean

all: $(TARGET)

# Link
$(TARGET): $(OBJS)
	@mkdir -p $(BUILDDIR)
	$(CC) -o $@ $^ $(LDFLAGS)

# Compile main.c
$(BUILDDIR)/main.o: $(SRCDIR)/main.c $(YACC_H) $(SRCDIR)/ast.h $(SRCDIR)/semantic.h $(SRCDIR)/ir.h $(SRCDIR)/opt.h $(SRCDIR)/codegen.h
	@mkdir -p $(BUILDDIR)
	$(CC) $(CFLAGS) -c $< -o $@

# Compile other .c in src/
$(BUILDDIR)/%.o: $(SRCDIR)/%.c
	@mkdir -p $(BUILDDIR)
	$(CC) $(CFLAGS) -c $< -o $@

# Compile cJSON
$(BUILDDIR)/cJSON.o: $(CJSON_C)
	@mkdir -p $(BUILDDIR)
	$(CC) $(CFLAGS) -c $< -o $@

# Bison: generate parser.tab.c/h in build/
$(YACC_C) $(YACC_H): $(YACC_FILE)
	@mkdir -p $(BUILDDIR)
	$(BISON) -d -o $(YACC_C) $(YACC_FILE)

# Flex: generate lexer.yy.c in build/
$(LEX_C): $(LEX_FILE) $(YACC_H)
	@mkdir -p $(BUILDDIR)
	$(FLEX) -o $(LEX_C) $(LEX_FILE)

# Compile the generated parser and lexer
$(BUILDDIR)/parser.tab.o: $(YACC_C)
	$(CC) $(CFLAGS) -c $< -o $@

$(BUILDDIR)/lexer.yy.o: $(LEX_C)
	$(CC) $(CFLAGS) -c $< -o $@

clean:
	rm -rf $(BUILDDIR) $(TARGET)
